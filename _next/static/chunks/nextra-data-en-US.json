{"/":{"title":"Introduction","data":{"":"Welcome to Sleepless! This is the official documentation for resources developed by the Sleepless dev team."}},"/interact":{"title":"Sleepless Interact","data":{"":"A 3D DUI interaction library for interacting with various entities and points in the world.","installation#Installation":"","download-a-release-or-build-the-source-code#Download a release or build the source code.":"git clone https://github.com/Sleepless-Development/sleepless_interact.git\ncd sleepless_interact/web\npnpm i\npnpm build","configure#Configure":"To changed the config settings, look inside imports/config.lua\n-- vector4 RGBA (R: 0-255, G: 0-255, B: 0-255, A: 0-255)\nconfig.color = vec4(28, 126, 214, 200)\n-- {dict: string, txt: string} non-active sprite dictionary/texture\nconfig.indicatorSprite = { dict = 'shared', txt = 'emptydot_32' }\n-- boolean true/false use a keybind to show and hide the interactions\nconfig.useShowKeyBind = false\n-- string default key mapping for the show interactions keybind\nconfig.defaultShowKeyBind = 'LMENU'\n-- \"hold\" | \"toggle\" sets the behavior of the show interactions key bind\nconfig.showKeyBindBehavior = 'hold'","usage#Usage":"To enable the library inside of your resource just add @sleepless_interact/init.lua as a client_script in your fxmanifest.lua file.\nclient_scripts {\n    '@sleepless_interact/init.lua',\n}\nWhen sleepless_interact has been imported into your script, it will make a new global:\ninteract for calling sleepless_interact functions into your script.\nall of the functions can also be called via exports. example: exports.sleepless_interact:addEntity(data)\nYou can now use the interact functions inside of your resource."}},"/interact/client/addCoords":{"title":"addCoords","data":{"":"Adds a static coordinates-based interaction to the game. This function registers an interaction at a specific location, allowing players to interact with it when they are within a defined distance.","parameters#Parameters":"data (CoordsData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\ncoords (vector3 or vector3[]): The coordinates where the interaction is located.\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\ngroups? (table<string, number>): table of allowed jobs and minimum grades for this Option\nitems? (string or string[] or table<string, number>): An item, array of items, or pairs of items-count required to show the option.\nanyItem? (boolean): Only require a single item from the items table to exist.\ndestroy? (boolean): when true, the entire interaction will destroy when this option is selected\ncanInteract? (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\naction? (function(id: string | number, entity?: number, coords: vec3, distance: number)): function that gets called when the option is selected\nexport? (string): export that gets called when the option is selected.\nevent? (string): client event that gets called when the option is selected.\nserverEvent? (string): server event that gets called when the option is selected.\ncommand? (string): command that gets called when the option is selected.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","returns#Returns":"id (string | number): The unique identifier for the interaction that was added.","examples#Examples":"","single#single":"interact.addCoords({\n    id = \"uniqueInteractionId\",\n    coords = vector3(123.4, 567.8, 250.0),\n    options = {\n        {\n            text = \"Interact Option 1\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Action 1 triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})","multiple#multiple":"when sending a list of coords it will modify the id for eachone by adding the index to the end of the id: \"uniqueid:1\", \"uniqueid:2\", etc.\ninteract.addCoords({\n    id = \"uniqueInteractionId\", --id that is stored in variable\n    coords = {\n        vector3(123.4, 567.8, 250.0),\n        vector3(421.4, 567.8, 125.0)\n    },\n    options = {\n        {\n            text = \"Interact Option 1\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Action 1 triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addEntity":{"title":"addEntity","data":{"":"Registers an interaction for a networked entity in the game. This function enables players to interact with specified networked entities within a defined distance, with customizable options for each interaction.","parameters#Parameters":"data (EntityData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nnetId (number): The network ID for the networked entity.\noffset? (vector3): The offset from the entity's position where the interaction is located.\nbone? (string or string[]): name of the bone to interact with or an array of bones. will use the first valid bone for the entity from the array\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\ngroups? (table<string, number>): table of allowed jobs and minimum grades for this Option\nitems? (string or string[] or table<string, number>): An item, array of items, or pairs of items-count required to show the option.\nanyItem? (boolean): Only require a single item from the items table to exist.\ndestroy? (boolean): when true, the entire interaction will destroy when this option is selected\ncanInteract? (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\naction? (function(id: string | number, entity?: number, coords: vec3, distance: number)): function that gets called when the option is selected\nexport? (string): export that gets called when the option is selected.\nevent? (string): client event that gets called when the option is selected.\nserverEvent? (string): server event that gets called when the option is selected.\ncommand? (string): command that gets called when the option is selected.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","returns#Returns":"id (string | number): The unique identifier for the interaction that was added.","example#Example":"interact.addEntity({\n    id = \"uniqueNetworkedEntityId\",\n    netId = 123456,  -- Example network ID\n    options = {\n        {\n            text = \"Networked Interact Option\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Networked entity action triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalModel":{"title":"addGlobalModel","data":{"":"Registers interactions for one or more models in the game. This function enables global interactions with specified models, allowing customizable options for each interaction regardless of the model's specific instances or locations.","parameters#Parameters":"data (ModelData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nmodels (table): A list of models and their interaction settings. Each entry in the list is a table with the following fields:\nmodel (string | number): The model name or hash for which the interaction is being registered.\noffset? (vector3): The offset from the model's position where the interaction is located.\nbone? (string or string[]): name of the bone to interact with or an array of bones. will use the first valid bone for the entity from the array\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\ngroups? (table<string, number>): table of allowed jobs and minimum grades for this Option\nitems? (string or string[] or table<string, number>): An item, array of items, or pairs of items-count required to show the option.\nanyItem? (boolean): Only require a single item from the items table to exist.\ndestroy? (boolean): when true, the entire interaction will destroy when this option is selected\ncanInteract? (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\naction? (function(id: string | number, entity?: number, coords: vec3, distance: number)): function that gets called when the option is selected\nexport? (string): export that gets called when the option is selected.\nevent? (string): client event that gets called when the option is selected.\nserverEvent? (string): server event that gets called when the option is selected.\ncommand? (string): command that gets called when the option is selected.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalModel({\n    id = \"uniqueNetworkedEntityId\",\n    models = {\n        {model = \"prop_vend_snak_01\", offset = vector3(0, 0, 1.0)},\n        {model = \"prop_vend_soda_02\", offset = vector3(0, 0, 1.0)},\n    },\n    options = {\n        {\n            text = \"Interact with Model\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Model interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalPed":{"title":"addGlobalPed","data":{"":"Registers a global interaction for non-player characters (NPCs) or peds in the game. This function enables customizable interactions with NPCs, allowing for specific actions and conditions to be defined for interacting with these entities across the game world.","parameters#Parameters":"data (PedInteractionData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nbone? (string or string[]): name of the bone to interact with or an array of bones. will use the first valid bone for the entity from the array\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\ngroups? (table<string, number>): table of allowed jobs and minimum grades for this Option\nitems? (string or string[] or table<string, number>): An item, array of items, or pairs of items-count required to show the option.\nanyItem? (boolean): Only require a single item from the items table to exist.\ndestroy? (boolean): when true, the entire interaction will destroy when this option is selected\ncanInteract? (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\naction? (function(id: string | number, entity?: number, coords: vec3, distance: number)): function that gets called when the option is selected\nexport? (string): export that gets called when the option is selected.\nevent? (string): client event that gets called when the option is selected.\nserverEvent? (string): server event that gets called when the option is selected.\ncommand? (string): command that gets called when the option is selected.\noffset? (vector3): The offset from the ped's position where the interaction is located.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalPed({\n    id = \"uniquePedInteractionId\",\n    options = {\n        {\n            text = \"Interact with NPC\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"NPC interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    offset = vector3(0, 0, 1.0),\n    bone = \"head\",\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalPlayer":{"title":"addGlobalPlayer","data":{"":"Registers a global interaction for players in the game. This function enables interactions with players, using customizable options for each interaction that can be triggered based on specified conditions.","parameters#Parameters":"data (PedInteractionData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nbone? (string or string[]): name of the bone to interact with or an array of bones. will use the first valid bone for the entity from the array\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\ngroups? (table<string, number>): table of allowed jobs and minimum grades for this Option\nitems? (string or string[] or table<string, number>): An item, array of items, or pairs of items-count required to show the option.\nanyItem? (boolean): Only require a single item from the items table to exist.\ndestroy? (boolean): when true, the entire interaction will destroy when this option is selected\ncanInteract? (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\naction? (function(id: string | number, entity?: number, coords: vec3, distance: number)): function that gets called when the option is selected\nexport? (string): export that gets called when the option is selected.\nevent? (string): client event that gets called when the option is selected.\nserverEvent? (string): server event that gets called when the option is selected.\ncommand? (string): command that gets called when the option is selected.\noffset? (vector3): The offset from the player's position where the interaction is located.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalPlayer({\n    id = \"uniquePlayerInteractionId\",\n    options = {\n        {\n            text = \"Interact with Player\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Player interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    offset = vector3(0, 0, 1.0),\n    bone = \"head\",\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalVehicle":{"title":"addGlobalVehicle","data":{"":"Registers a global interaction for networked vehicles in the game. This function allows for customizable interactions with vehicles, enabling specific actions and conditions for interacting with these entities across the game world.","parameters#Parameters":"data (VehicleInteractionData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nbone? (string or string[]): name of the bone to interact with or an array of bones. will use the first valid bone for the entity from the array\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\ngroups? (table<string, number>): table of allowed jobs and minimum grades for this Option\nitems? (string or string[] or table<string, number>): An item, array of items, or pairs of items-count required to show the option.\nanyItem? (boolean): Only require a single item from the items table to exist.\ndestroy? (boolean): when true, the entire interaction will destroy when this option is selected\ncanInteract? (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\naction? (function(id: string | number, entity?: number, coords: vec3, distance: number)): function that gets called when the option is selected\nexport? (string): export that gets called when the option is selected.\nevent? (string): client event that gets called when the option is selected.\nserverEvent? (string): server event that gets called when the option is selected.\ncommand? (string): command that gets called when the option is selected.\noffset? (vector3): The offset from the vehicle's position where the interaction is located.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalVehicle({\n    id = \"uniqueVehicleInteractionId\",\n    options = {\n        {\n            text = \"Interact with Vehicle\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Vehicle interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    offset = vector3(0, 0, 1.0),\n    bone = \"chassis\",\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addLocalEntity":{"title":"addLocalEntity","data":{"":"Registers an interaction for a local (non-networked) entity in the game. This allows players to interact with specified local entities within a defined distance, offering customizable interaction options.","parameters#Parameters":"data (LocalEntityData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nentity (number): The entity handle of the local entity.\noffset? (vector3): The offset from the entity's position where the interaction is located.\nbone? (string or string[]): name of the bone to interact with or an array of bones. will use the first valid bone for the entity from the array\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\ngroups? (table<string, number>): table of allowed jobs and minimum grades for this Option\nitems? (string or string[] or table<string, number>): An item, array of items, or pairs of items-count required to show the option.\nanyItem? (boolean): Only require a single item from the items table to exist.\ndestroy? (boolean): when true, the entire interaction will destroy when this option is selected\ncanInteract? (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\naction? (function(id: string | number, entity?: number, coords: vec3, distance: number)): function that gets called when the option is selected\nexport? (string): export that gets called when the option is selected.\nevent? (string): client event that gets called when the option is selected.\nserverEvent? (string): server event that gets called when the option is selected.\ncommand? (string): command that gets called when the option is selected.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","returns#Returns":"id (string | number): The unique identifier for the interaction that was added.","example#Example":"interact.addLocalEntity({\n    id = \"uniqueLocalEntityId\",\n    entity = 123456,  -- Example entity handle\n    options = {\n        {\n            text = \"Local Interact Option\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Local entity action triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/removeById":{"title":"removeById","data":{"":"Removes an existing interaction associated with an id. this wont work for global interactions","parameters#Parameters":"id (number | string): The unique identifier of the interaction you wish to remove. This ID is returned by the function used to add the interaction initially.\nsimilar (boolean): determines wether the id search is strict or notDeepEqual. i.e. if similar is true and id is 'hello', it would also remove 'hello:world'","examples#Examples":"local interactionId = interact.addCoords({\n    id = \"uniqueInteractionId\", --id that is stored in variable\n    coords = vector3(123.4, 567.8, 250.0),\n    options = {\n        {\n            text = \"Interact Option 1\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Action 1 triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})\n-- To remove the specific interaction by its ID:\ninteract.removeById(interactionId)\nlocal interactionId = interact.addCoords({\n    id = \"uniqueInteractionId\", --id that is stored in variable\n    coords = {\n        vector3(123.4, 567.8, 250.0),\n        vector3(421.4, 567.8, 125.0)\n    },\n    options = {\n        {\n            text = \"Interact Option 1\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Action 1 triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})\n-- To remove the specific interaction by its ID:\ninteract.removeById(interactionId, true)"}},"/interact/client/removeEntity":{"title":"removeEntity","data":{"":"Removes all existing interaction associated with a given network ID. this execludes global interactions.","parameters#Parameters":"netId (number): The network ID of the entity whose interaction you wish to remove.","example#Example":"-- To remove the interaction associated with this networked vehicle:\ninteract.removeEntity(networkId)"}},"/interact/client/removeGlobalModel":{"title":"removeGlobalModelById","data":{"":"Removes global interactions associated with a specific model or an array of models and an id.","parameters#Parameters":"id (number | string): The unique identifier of the interaction you wish to remove. This ID is returned by the function used to add the interaction initially.","example#Example":"local interactionId = interact.addGlobalModel({\n        id = 'TakeNozzle',\n        models = {\n            { model = `prop_gas_pump_1a` },\n            { model = `prop_gas_pump_1b` },\n        },\n        options = {\n            {\n                text = \"Take Nozzle\",\n                icon = \"hand\", -- Example simple FA icon name\n                canInteract = function(entity, distance, coords, id)\n                    return true\n                end\n                action = function(data)\n                    print(\"Global model action triggered\")\n                end,\n            },\n        },\n        renderDistance = 5.0,\n        activeDistance = 2.0,\n        cooldown = 1500\n    })\ninteract.removeGlobalModelById({`prop_gas_pump_1a`, `prop_gas_pump_1b`}, interactionId)"}},"/interact/client/removeGlobalPed":{"title":"removeGlobalPedById","data":{"":"Removes global ped interactions associated with an id","parameters#Parameters":"id (number | string): The unique identifier of the interaction you wish to remove. This ID is returned by the function used to add the interaction initially.","example#Example":"local interactionId = interact.addGlobalPed({\n    id = \"uniqueNetworkedEntityId\",\n    options = {\n        {\n            text = \"Networked Interact Option\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Global ped action triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})\ninteract.removeGlobalPedById(interactionId)"}},"/interact/client/removeGlobalPlayer":{"title":"removeGlobalPlayerById","data":{"":"Removes global player interactions associated with an id","parameters#Parameters":"id (number | string): The unique identifier of the interaction you wish to remove. This ID is returned by the function used to add the interaction initially.","example#Example":"local interactionId = interact.addGlobalPlayer({\n    id = \"uniqueNetworkedEntityId\",\n    options = {\n        {\n            text = \"Networked Interact Option\",\n            icon = \"hand\",  -- Example simple FA icon name\n            groups = {['police'] = 1},\n            items = {['money'] = 100},\n            action = function(data) print(\"Global Player action triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return true\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})\ninteract.removeGlobalPlayerById(interactionId)"}},"/interact/client/removeGlobalVehicle":{"title":"removeGlobalVehicle","data":{"":"Removes global vehicle interactions associated with an id","parameters#Parameters":"id (number | string): The unique identifier of the interaction you wish to remove. This ID is returned by the function used to add the interaction initially.","example#Example":"local interactionId = interact.addGlobalVehicle({\n    id = 'global:vehicle:Trunk',\n    bone = 'boot',\n    activeDistance = 1.5,\n    renderDistance = 3.0,\n    options = {\n        {\n            text = 'open trunk',\n            icon = 'car',\n            canInteract = function(entity, distance, coords, id)\n                local veh = entity\n                return GetVehicleDoorLockStatus(veh) ~= 2\n            end,\n            action = function(interaction)\n                local veh = interaction.entity\n                SetVehicleDoorOpen(veh, 5, false, false)\n                ExecuteCommand('+inv2')\n            end\n        },\n    }\n})\ninteract.removeGlobalVehicle(interactionId)"}},"/interact/client/removeLocalEntity":{"title":"removeLocalEntity","data":{"":"Removes all existing interaction associated with a given entity handle for a non networked entity. this execludes global interactions.","parameters#Parameters":"entity (number): The entity handle of the local entity whose interaction you wish to remove.","example#Example":"-- To remove the interaction for this local entity, use its handle:\ninteract.removeLocalEntity(entityHandle)"}},"/pedmanager":{"title":"Sleepless Ped Manager","data":{"":"this resource is compatible with our sleepless_interact resource!\nA FiveM ped manager for spawning local peds within distance of players and adding target/interact options to them","installation#Installation":"","download-the-release#Download the release":"","usage#Usage":"add to your resource folder and ensure sleeless_pedmanager in your server.cfg\nensure sleepless_pedmanager\nYou can now use the pedmanager exports inside of your resources."}},"/pedmanager/client/addPed":{"title":"addPed","data":{"":"add a new ped to be handled by the manager. allows for target options, animations, props, scenarios and more","parameters#Parameters":"data (PedConfig): A table containing the config data.\nmodel (string | number): A hash or string for the ped model.\ncoords (vector4): The coordinates/heading where the ped is located.\nscenario? (string): The name of a scenario for the ped to play when spawned\nanimation? (table): table of animation data\ndict (string): animation dictionary\nanim (string): animation name\nflag? (number): animation flag\nprop? (table): table of prop data\npropModel (string or number): model hash or string for the prop\nbone (string or number): bone name or index of the ped to attach the prop to\npos? (vec3): position of the prop relative to the bone its attached to\nrot? (vec3): rotation of the prop relative to the bone its attached to\ntargetOptions? (table): an array of ox_target options\ninteractOptions? (table): a sleepless_interact local entity interaction\nrenderDistance? (number): distance from the player at which the ped spawns\nonSpawn? (function(ped?: number)): a function that gets called right AFTER the ped is spawned\nonDespawn? (function(ped?: number)): a function that gets called right BEFORE the ped is despawned","returns#Returns":"ox_lib point instance","example#Example":"local pedPoint = exports.sleepless_pedmanager:addPed({\n        model = \"u_m_y_zombie_01\",\n        coords = vec4(-1665.4545, -3143.3169, 13.9914, 281.1344),\n        renderDistance = 8.0,\n        -- scenario = \"WORLD_HUMAN_CLIPBOARD\", --optionally use a scenario or an animation.\n        animation = {\n            dict = \"amb@code_human_in_bus_passenger_idles@female@tablet@idle_a\",\n            anim = \"idle_a\",\n            flag = 63\n        },\n        prop = {\n            propModel = \"prop_cs_tablet\",\n            bone = 28422,\n            rotation = vec3(0.0, 0.0, 0.03),\n            offset = vec3(0.0, 0.0, 0.03),\n        },\n        targetOptions = { --whatever normal options for ox_target\n            {\n                icon = 'fas fa-money-bill-alt',\n                label = 'something',\n                serverEvent = \"some event\"\n            },\n        },\n        interactOptions = {\n            id = \"uniqueID\",\n            options = {\n                {\n                    text = \"Local Interact Option\",\n                    icon = \"hand\", -- Example simple FA icon name\n                    -- groups = {['police'] = 1},\n                    -- items = {['money'] = 100},\n                    action = function(data) print(\"Local entity action triggered\") end,\n                    canInteract = function(entity, distance, coords, id)\n                        return distance < 2.0 -- Example condition based on distance\n                    end\n                }\n            },\n            renderDistance = 10.0,\n            activeDistance = 2.0,\n            cooldown = 1500\n        },\n        onSpawn = function(ped)\n            GiveWeaponToPed(ped, `WEAPON_RPG`, 100, false, true)\n            SetCurrentPedWeapon(ped, `WEAPON_RPG`, true)\n        end,\n        onDespawn = function(ped)\n        end\n})"}}}
{"/":{"title":"Introduction","data":{"":"Welcome to Sleepless! This is the official documentation for resources developed by the Sleepless dev team."}},"/interact":{"title":"Sleepless Interact","data":{"":"A 3D DUI interaction library for interacting with various entities and points in the world.","installation#Installation":"","download-a-release-or-build-the-source-code#Download a release or build the source code.":"git clone https://github.com/Sleepless-Development/sleepless_interact.git\ncd sleepless_interact/web\npnpm i\npnpm build","usage#Usage":"To enable the library inside of your resource just add @demi_interact/init.lua as a client_script in your fxmanifest.lua file.\nclient_scripts {\n    '@demi_interact/init.lua',\n}\nWhen sleepless_interact has been imported into your script, it will make a new global:\ninteract for calling sleepless_interact functions into your script.\nall of the functions can also be called via exports. example: exports.sleepless_interact:addEntity(data)\nYou can now use the interact functions inside of your resource."}},"/interact/client/addCoords":{"title":"addCoords","data":{"":"Adds a static coordinates-based interaction to the game. This function registers an interaction at a specific location, allowing players to interact with it when they are within a defined distance.","parameters#Parameters":"data (CoordsData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\ncoords (vector3): The coordinates where the interaction is located.\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\naction (function(data: CoordsInteraction)): The function to call when the option is selected.\ncanInteract (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","returns#Returns":"id (string | number): The unique identifier for the interaction that was added.","example#Example":"interact.addCoords({\n    id = \"uniqueInteractionId\",\n    coords = vector3(123.4, 567.8, 250.0),\n    options = {\n        {\n            text = \"Interact Option 1\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Action 1 triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addEntity":{"title":"addEntity","data":{"":"Registers an interaction for a networked entity in the game. This function enables players to interact with specified networked entities within a defined distance, with customizable options for each interaction.","parameters#Parameters":"data (EntityData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nnetId (number): The network ID for the networked entity.\noffset? (vector3): The offset from the entity's position where the interaction is located.\nbone? (string): The name of the bone for the entity where the interaction is attached.\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\naction (function(data: EntityInteraction)): The function to call when the option is selected.\ncanInteract (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","returns#Returns":"id (string | number): The unique identifier for the interaction that was added.","example#Example":"interact.addEntity({\n    id = \"uniqueNetworkedEntityId\",\n    netId = 123456,  -- Example network ID\n    options = {\n        {\n            text = \"Networked Interact Option\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Networked entity action triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalModel":{"title":"addGlobalModel","data":{"":"Registers interactions for one or more models in the game. This function enables global interactions with specified models, allowing customizable options for each interaction regardless of the model's specific instances or locations.","parameters#Parameters":"data (ModelData): A table containing the interaction data. It must include:\nmodels (table): A list of models and their interaction settings. Each entry in the list is a table with the following fields:\nmodel (string | number): The model name or hash for which the interaction is being registered.\noffset? (vector3): The offset from the model's position where the interaction is located.\nbone? (string): The name of the bone for the model where the interaction is attached.\noptions (table): A list of options and actions for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\naction (function(data: self)): The function to call when the option is selected.\ncanInteract (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalModel({\n    models = {\n        {model = \"prop_vend_snak_01\", offset = vector3(0, 0, 1.0)},\n        {model = \"prop_vend_soda_02\", offset = vector3(0, 0, 1.0)},\n    },\n    options = {\n        {\n            text = \"Interact with Model\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Model interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalPed":{"title":"addGlobalPed","data":{"":"Registers a global interaction for non-player characters (NPCs) or peds in the game. This function enables customizable interactions with NPCs, allowing for specific actions and conditions to be defined for interacting with these entities across the game world.","parameters#Parameters":"data (PedInteractionData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\noptions (table): A list of options and actions for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\naction (function(data: EntityInteraction)): The function to call when the option is selected.\ncanInteract (function(entity?: number, distance: number, coords: vector3, id: string | number): boolean): A function that determines if the option can be interacted with, accepting parameters for optional entity, distance to the interaction, interaction coordinates, and the interaction ID.\noffset? (vector3): The offset from the ped's position where the interaction is located.\nbone? (string): The name of the bone for the ped where the interaction is attached.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalPed({\n    id = \"uniquePedInteractionId\",\n    options = {\n        {\n            text = \"Interact with NPC\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"NPC interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    offset = vector3(0, 0, 1.0),\n    bone = \"head\",\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalPlayer":{"title":"addGlobalPlayer","data":{"":"Registers a global interaction for players in the game. This function enables interactions with players, using customizable options for each interaction that can be triggered based on specified conditions.","parameters#Parameters":"data (PedInteractionData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\noptions (table): A list of options and actions for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\naction (function(data: EntityInteraction)): The function to call when the option is selected.\ncanInteract (function(entity?: number, distance: number, coords: vector3, id: string | number): boolean): A function that determines if the option can be interacted with, accepting parameters for optional entity, distance to the interaction, interaction coordinates, and the interaction ID.\noffset? (vector3): The offset from the player's position where the interaction is located.\nbone? (string): The name of the bone for the player where the interaction is attached.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalPlayer({\n    id = \"uniquePlayerInteractionId\",\n    options = {\n        {\n            text = \"Interact with Player\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Player interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    offset = vector3(0, 0, 1.0),\n    bone = \"head\",\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/addGlobalVehicle":{"title":"addGlobalVehicle","data":{"":"Registers a global interaction for networked vehicles in the game. This function allows for customizable interactions with vehicles, enabling specific actions and conditions for interacting with these entities across the game world.","parameters#Parameters":"data (VehicleInteractionData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\noptions (table): A list of options and actions for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\naction (function(data: EntityInteraction)): The function to call when the option is selected.\ncanInteract (function(entity?: number, distance: number, coords: vector3, id: string | number): boolean): A function that determines if the option can be interacted with, accepting parameters for optional entity, distance to the interaction, interaction coordinates, and the interaction ID.\noffset? (vector3): The offset from the vehicle's position where the interaction is located.\nbone? (string): The name of the bone for the vehicle where the interaction is attached.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","example#Example":"interact.addGlobalVehicle({\n    id = \"uniqueVehicleInteractionId\",\n    options = {\n        {\n            text = \"Interact with Vehicle\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Vehicle interaction triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    offset = vector3(0, 0, 1.0),\n    bone = \"chassis\",\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/removeEntity":{"title":"removeEntity","data":{"":"Removes an existing interaction associated with a networked entity by its network ID. This function facilitates the management of dynamic interactions within the game world, allowing for the removal of interactions tied to networked entities that have been despawned or are no longer relevant.","parameters#Parameters":"netId (number): The network ID of the entity whose interaction you wish to remove.","example#Example":"-- To remove the interaction associated with this networked vehicle:\ninteract.removeEntity(networkId)"}},"/interact/client/addLocalEntity":{"title":"addLocalEntity","data":{"":"Registers an interaction for a local (non-networked) entity in the game. This allows players to interact with specified local entities within a defined distance, offering customizable interaction options.","parameters#Parameters":"data (LocalEntityData): A table containing the interaction data. It must include:\nid (string | number): A unique identifier for the interaction.\nentity (number): The entity handle of the local entity.\noffset? (vector3): The offset from the entity's position where the interaction is located.\nbone? (string): The name of the bone for the entity where the interaction is attached.\noptions (table): A list of options for the interaction. Each option is a table with the following fields:\ntext (string): The text displayed for the option.\nicon (string): The simple FontAwesome icon name displayed for the option (e.g., \"hand\").\naction (function(data: LocalEntityInteraction)): The function to call when the option is selected.\ncanInteract (function(entity?: number, distance: number, coords: vector3, id: string | number)): A function that determines if the option can be interacted with.\nrenderDistance? (number): distance at which the interaction indicator is visible. Defaults to 5.0.\nactiveDistance? (number): distance at which the interaction menu is visible. Defaults to 1.0.\ncooldown? (number): The cooldown time in milliseconds between interactions to prevent spamming. Defaults to 1000.","returns#Returns":"id (string | number): The unique identifier for the interaction that was added.","example#Example":"interact.addLocalEntity({\n    id = \"uniqueLocalEntityId\",\n    entity = 123456,  -- Example entity handle\n    options = {\n        {\n            text = \"Local Interact Option\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Local entity action triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})"}},"/interact/client/removeId":{"title":"removeId","data":{"":"Removes an existing interaction using its unique identifier. This function is essential for managing the lifecycle of interactions within the game, allowing for the precise removal of specific interactions when they are no longer needed or relevant.","parameters#Parameters":"id (number | string): The unique identifier of the interaction you wish to remove. This ID is returned by the function used to add the interaction initially.","example#Example":"local interactionId = interact.addCoords({\n    id = \"uniqueInteractionId\", --id that is stored in variable\n    coords = vector3(123.4, 567.8, 250.0),\n    options = {\n        {\n            text = \"Interact Option 1\",\n            icon = \"hand\",  -- Example simple FA icon name\n            action = function(data) print(\"Action 1 triggered\") end,\n            canInteract = function(entity, distance, coords, id)\n                return distance < 2.0 -- Example condition based on distance\n            end\n        }\n    },\n    renderDistance = 10.0,\n    activeDistance = 2.0,\n    cooldown = 1500\n})\n-- To remove the specific interaction by its ID:\ninteract.removeId(interactionId)"}},"/interact/client/removeLocalEntity":{"title":"removeLocalEntity","data":{"":"Removes an existing interaction associated with a local (non-networked) entity by its entity handle. This function allows for the cleanup of interactions tied to entities that are no longer present or required in the game world, helping maintain an organized and efficient interaction system.","parameters#Parameters":"entity (number): The entity handle of the local entity whose interaction you wish to remove.","example#Example":"-- To remove the interaction for this local entity, use its handle:\ninteract.removeLocalEntity(entityHandle)"}},"/interact/client/removeModel":{"title":"removeModel","data":{"":"Removes global interactions associated with a specific model or an array of models. This function enables developers to dynamically manage model interactions, allowing for the removal of interactions when models are no longer needed or relevant within the game world.","parameters#Parameters":"model (number | number[]): The model identifier (hash) or an array of model identifiers for which the interactions are to be removed. A single model identifier will remove the interaction for that specific model, while an array of identifiers will remove interactions for multiple models.","example#Example":"-- Example 1: Removing an interaction for a single model\nlocal modelIdentifier = `prop_vend_snak_01` -- Example model hash\ninteract.removeModel(modelIdentifier)\n-- Example 2: Removing interactions for multiple models\nlocal modelIdentifiers = {`prop_vend_snak_01`, `prop_vend_soda_02`} -- Example array of model hashes\ninteract.removeModel(modelIdentifiers)"}}}